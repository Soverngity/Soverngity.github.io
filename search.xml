<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ROS入门</title>
    <url>/2020/11/28/ROS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="ROS核心概念"><a href="#ROS核心概念" class="headerlink" title="ROS核心概念"></a>ROS核心概念</h1><p><strong>建议每次运行新程序之前都要运行roscore，因为ROS Master参数服务器存储的参数可能会冲突产生问题。</strong></p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118094857186.png" alt="image-20201118094857186"></p>
<h2 id="话题通信"><a href="#话题通信" class="headerlink" title="话题通信"></a>话题通信</h2><p>多对多的关系：针对同一个话题，可能有多个发布者和订阅者，如果有多个发布者可能会出现数据错乱</p>
<p>发布者和订阅者均具备缓冲区（因为可能发布者速度快，可能订阅者速度快）</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117142229766.png" alt="image-20201117142229766"></p>
<h2 id="服务通信"><a href="#服务通信" class="headerlink" title="服务通信"></a>服务通信</h2><p>一对多的关系</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117141802032.png" alt="image-20201117141802032"></p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117142103385.png" alt="image-20201117142103385"></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>在ROS Master中存在有一个参数服务器，参数类型（int、float、string等），机制为RPC通信</p>
<p>适合静态配置参数，同样ROS中也存在动态配置参数的功能</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117142525315.png" alt="image-20201117142525315"></p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117142925265.png" alt="image-20201117142925265"></p>
<h1 id="ROS命令行基本操作"><a href="#ROS命令行基本操作" class="headerlink" title="ROS命令行基本操作"></a>ROS命令行基本操作</h1><p><strong>roscore</strong> ：启动ROS Master</p>
<p><strong>rosrun turtlesim turtlesim_node</strong> ：启动turtlesim软件包中的turtle节点（仿真）</p>
<p><strong>rosrun turtlesim turtle_teleop_key</strong>：启动turtlesim软件包中的turtle_teleop_key节点（键盘控制）</p>
<p><strong>rqt_graph</strong> ：用于显示系统计算图（ROS本质为一张计算图）</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117145023215.png" alt="image-20201117145023215"></p>
<p><strong>rosnode</strong>：显示系统所有节点信息</p>
<blockquote>
<p>rosnode is a command-line tool for printing information about ROS Nodes.</p>
<p>Commands:<br>    rosnode ping    test connectivity to node<br>    rosnode list    list active nodes<br>    rosnode info    print information about node<br>    rosnode machine    list nodes running on a particular machine or list machines<br>    rosnode kill    kill a running node<br>    rosnode cleanup    purge registration information of unreachable nodes</p>
<p>Type rosnode <command> -h for more detailed usage, e.g. ‘rosnode ping -h’</p>
</blockquote>
<p><strong>rostopic</strong>：与话题相关操作</p>
<blockquote>
<p>rostopic is a command-line tool for printing information about ROS Topics.</p>
<p>Commands:<br>    rostopic bw    display bandwidth used by topic<br>    rostopic delay    display delay of topic from timestamp in header<br>    rostopic echo    print messages to screen<br>    rostopic find    find topics by type<br>    rostopic hz    display publishing rate of topic<br>    rostopic info    print information about active topic<br>    rostopic list    list active topics<br>    rostopic pub    publish data to topic<br>    rostopic type    print topic or field type</p>
<p>Type rostopic <command> -h for more detailed usage, e.g. ‘rostopic echo -h’</p>
</blockquote>
<p>发布话题消息示例：</p>
<p>rostopic pub -r 10(-r 设置10Hz) /turtle1/cmd_vel(话题名) geometry_msgs/Twist(消息结构) “linear:<br>  x: 1.0<br>  y: 0.0<br>  z: 0.0<br>angular:<br>  x: 0.0<br>  y: 0.0<br>  z: 0.0” (具体消息)</p>
<p><strong>rosmsg show geometry_msgs/Twist：</strong>查看geometry_msgs/Twist的结构</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117151420689.png" alt="image-20201117151420689"></p>
<p><strong>rosservice list</strong>：</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117151824677.png" alt="image-20201117151824677"></p>
<p>发布服务请求，产生第二支海龟：</p>
<p>rosservice call /spawn “x: 0.0<br>y: 0.0<br>theta: 0.0<br>name: ‘turtle2’” </p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117152147293.png" alt="image-20201117152147293"></p>
<p>**rosbag record -a(all) -O(压缩包) cmd_record(压缩包名)**：话题记录（从运行此命令开始记录）</p>
<p><strong>rosbag play cmd_record</strong>：话题复现</p>
<h1 id="ROS创建工作空间和功能包"><a href="#ROS创建工作空间和功能包" class="headerlink" title="ROS创建工作空间和功能包"></a>ROS创建工作空间和功能包</h1><h2 id="创建工作环境"><a href="#创建工作环境" class="headerlink" title="创建工作环境"></a>创建工作环境</h2><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117153811974.png" alt="image-20201117153811974"></p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117154628516.png" alt="image-20201117154628516"></p>
<p>catkin_make install 产生install文件夹</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117155717894.png" alt="image-20201117155717894"></p>
<h2 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h2><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117155002638.png" alt="image-20201117155002638"></p>
<h1 id="发布者、订阅者编程实现"><a href="#发布者、订阅者编程实现" class="headerlink" title="发布者、订阅者编程实现"></a>发布者、订阅者编程实现</h1><h2 id="使用Clion进行ROS开发"><a href="#使用Clion进行ROS开发" class="headerlink" title="使用Clion进行ROS开发"></a>使用Clion进行ROS开发</h2><p>参考：<a href="https://blog.csdn.net/ndyj0829/article/details/82192675">https://blog.csdn.net/ndyj0829/article/details/82192675</a></p>
<p>其中b步骤，b:进入/usr/share/applications中修改jetbrains-clion.desktop文件，在此路径下找不到，应该为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit ~&#x2F;.local&#x2F;share&#x2F;applications&#x2F;jetbrains-clion.desktop</span><br></pre></td></tr></table></figure>

<h2 id="发布者Publisher编程实现"><a href="#发布者Publisher编程实现" class="headerlink" title="发布者Publisher编程实现"></a>发布者Publisher编程实现</h2><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117191511654.png" alt="image-20201117191511654"></p>
<h3 id="修改CMakeLists-txt"><a href="#修改CMakeLists-txt" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117191608917.png" alt="image-20201117191608917"></p>
<h3 id="编译并运行发布者"><a href="#编译并运行发布者" class="headerlink" title="编译并运行发布者"></a>编译并运行发布者</h3><p>编译之后，在catkin_ws/devel/lib下生成名为velocity_publisher的可执行文件</p>
<p>下图source devel/setup.bash命令为设置终端可找到此功能包，因此可将此命令加入到~/.bashrc文件中，就不用再手动多次执行此命令，下两条rosrun命令分别启动功能包中的对应节点，配置完可直接启动。</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117191644257.png" alt="image-20201117191644257"></p>
<h3 id="python实现发布者"><a href="#python实现发布者" class="headerlink" title="python实现发布者"></a>python实现发布者</h3><p>无需编译，右键py文件权限将Allow executing file as program打勾（允许作为程序执行文件），命令行直接./velocity_publisher.py即可。</p>
<p><strong>如果通过rosrun执行呢？？？</strong><br>直接rosrun learning_topic velocity_publisher.py，rosrun learning_topic按两下table键即可看到。</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117192653050.png" alt="image-20201117192653050"></p>
<h2 id="订阅者Subscribe编程实现"><a href="#订阅者Subscribe编程实现" class="headerlink" title="订阅者Subscribe编程实现"></a>订阅者Subscribe编程实现</h2><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117192904126.png" alt="image-20201117192904126"></p>
<h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117194856111.png" alt="image-20201117194856111"></p>
<h3 id="修改CMakeLists-txt-1"><a href="#修改CMakeLists-txt-1" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117194821806.png" alt="image-20201117194821806"></p>
<h3 id="编译并运行"><a href="#编译并运行" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117194930799.png" alt="image-20201117194930799"></p>
<h2 id="话题消息的定义跟使用"><a href="#话题消息的定义跟使用" class="headerlink" title="话题消息的定义跟使用"></a>话题消息的定义跟使用</h2><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117200259691.png" alt="image-20201117200259691"></p>
<h3 id="自定义话题消息"><a href="#自定义话题消息" class="headerlink" title="自定义话题消息"></a>自定义话题消息</h3><p>1、msg文件语言无关，编译时动态扩展</p>
<p>2、  <build_depend>message_generation</build_depend>  //编译依赖，动态产生msg的依赖功能包<br>        <exec_depend>message_runtime</exec_depend>         //执行依赖，动态运行时依赖</p>
<p><strong>3、在CMakeLists.txt添加编译选项</strong></p>
<p>1）add_message_files(FILES Person.msg)                     //将Person.msg作为消息接口，针对其做编译<br>     generate_messages(DEPENDENCIES std_msgs)      //编译Person.msg依赖的ROS已有的库或包</p>
<p>2）找到catkin_package，取消注释CATKIN_DEPENDS一行并加入message_runtime</p>
<p>catkin_package(</p>
<p>#INCLUDE_DIRS include</p>
<p>#LIBRARIES learning_topic</p>
<p>CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime</p>
<p>#DEPENDS system_libmess</p>
<p>)</p>
<p>5、回到根目录，运行catkin_make进行编译</p>
<p>6、进入到catkin_ws/devel/include/learning_topic文件夹下即可看到编译生成的Person.h</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117200424924.png" alt="image-20201117200424924"></p>
<h3 id="创建发布者代码"><a href="#创建发布者代码" class="headerlink" title="创建发布者代码"></a>创建发布者代码</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117202343368.png" alt="image-20201117202343368"></p>
<h3 id="创建订阅者代码"><a href="#创建订阅者代码" class="headerlink" title="创建订阅者代码"></a>创建订阅者代码</h3><p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117202546391.png" alt="image-20201117202546391"></p>
<h3 id="修改CMakeLists-txt-2"><a href="#修改CMakeLists-txt-2" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p>add_executable(person_publisher src/person_publisher.cpp)<br>target_link_libraries(person_publisher ${catkin_LIBRARIES})<br>add_dependencies(person_publisher ${PROJECT_NAME}_generate_messages_cpp)    //用于跟自定义消息连接</p>
<p>add_executable(person_subscriber src/person_subscriber.cpp)<br>target_link_libraries(person_subscriber ${catkin_LIBRARIES})<br>add_dependencies(person_subscriber ${PROJECT_NAME}_generate_messages_cpp)  //用于跟自定义消息连接</p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117203411595.png" alt="image-20201117203411595"></p>
<h3 id="编译并运行发布者和订阅者"><a href="#编译并运行发布者和订阅者" class="headerlink" title="编译并运行发布者和订阅者"></a>编译并运行发布者和订阅者</h3><p><strong>此时如果将roscore终端关闭也即关闭ROS Master，结果是仍然正常通信，因为此时两者已经建立连接，但是访问服务器参数时有问题</strong></p>
<p><img src="F:\毕设\ROS\ROS入门.assets\image-20201117204035931.png" alt="image-20201117204035931"></p>
<h1 id="客户端、服务器编程实现"><a href="#客户端、服务器编程实现" class="headerlink" title="客户端、服务器编程实现"></a>客户端、服务器编程实现</h1><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118093026160.png" alt="image-20201118093026160"></p>
<h2 id="客户端编程代码"><a href="#客户端编程代码" class="headerlink" title="客户端编程代码"></a>客户端编程代码</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118092533798.png" alt="image-20201118092533798"></p>
<h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118093858683.png" alt="image-20201118093858683"></p>
<h3 id="修改CMakeLists-txt，配置编译规则"><a href="#修改CMakeLists-txt，配置编译规则" class="headerlink" title="修改CMakeLists.txt，配置编译规则"></a>修改CMakeLists.txt，配置编译规则</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118094102792.png" alt="image-20201118094102792"></p>
<h3 id="编译并运行-1"><a href="#编译并运行-1" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118094537609.png" alt="image-20201118094537609"></p>
<h2 id="服务端编程代码"><a href="#服务端编程代码" class="headerlink" title="服务端编程代码"></a>服务端编程代码</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118095211812.png" alt="image-20201118095211812"></p>
<h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118101352550.png" alt="image-20201118101352550"></p>
<h3 id="编译并运行-2"><a href="#编译并运行-2" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118101303710.png" alt="image-20201118101303710"></p>
<h2 id="服务数据的定义与使用"><a href="#服务数据的定义与使用" class="headerlink" title="服务数据的定义与使用"></a>服务数据的定义与使用</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118101904727.png" alt="image-20201118101904727"></p>
<h3 id="自定义服务数据"><a href="#自定义服务数据" class="headerlink" title="自定义服务数据"></a>自定义服务数据</h3><p>1、srv文件语言无关。**—三个横线以上为request数据，以下为respond的数据。**</p>
<p>2、  <build_depend>message_generation</build_depend>  //编译依赖，动态产生msg的依赖功能包<br>        <exec_depend>message_runtime</exec_depend>         //执行依赖，动态运行时依赖</p>
<p><strong>3、在CMakeLists.txt添加编译选项</strong></p>
<p>1）add_service_files(FILES Person.srv)                     //将Person.srv作为消息接口，针对其做编译<br>     generate_messages(DEPENDENCIES std_msgs)      //编译Person.srv依赖的ROS已有的库或包</p>
<p>2）找到catkin_package，取消注释CATKIN_DEPENDS一行并加入message_runtime</p>
<p>catkin_package(</p>
<p>#INCLUDE_DIRS include</p>
<p>#LIBRARIES learning_topic</p>
<p>CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime</p>
<p>#DEPENDS system_libmess</p>
<p>)</p>
<p>5、回到根目录，运行catkin_make进行编译</p>
<p>6、进入到catkin_ws/devel/include/learning_topic文件夹下即可看到编译生成三个头文件分别为：<br>Person.h（一般只包含此文件即可，总的）、PersonRequest.h（请求）、PersonRespond.h（回应）</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118103240016.png" alt="image-20201118103240016"></p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118101958400.png" alt="image-20201118101958400"></p>
<h3 id="创建客户端代码"><a href="#创建客户端代码" class="headerlink" title="创建客户端代码"></a>创建客户端代码</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118103514340.png" alt="image-20201118103514340"></p>
<h3 id="创建服务端代码"><a href="#创建服务端代码" class="headerlink" title="创建服务端代码"></a>创建服务端代码</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118103428222.png" alt="image-20201118103428222"></p>
<h3 id="修改CMakeLists-txt-3"><a href="#修改CMakeLists-txt-3" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p>add_executable(person_server src/person_server.cpp)<br>target_link_libraries(person_server ${catkin_LIBRARIES})<br>add_dependencies(person_server ${PROJECT_NAME}_gencpp)    //用于跟自定义消息连接</p>
<p>add_executable(person_client src/person_client.cpp)<br>target_link_libraries(person_client ${catkin_LIBRARIES})<br>add_dependencies(person_client ${PROJECT_NAME}_gencpp)  //用于跟自定义消息连接</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118110550046.png" alt="image-20201118110550046"></p>
<h1 id="参数的使用与编程方法"><a href="#参数的使用与编程方法" class="headerlink" title="参数的使用与编程方法"></a>参数的使用与编程方法</h1><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118111301079.png" alt="image-20201118111301079"></p>
<h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118112103664.png" alt="image-20201118112103664"></p>
<p>设置颜色值不会马上更改，需要发送一个 rosservice call /clear “{}”  请求，会重新查询参数服务器，背景颜色更改</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118112130620.png" alt="image-20201118112130620"></p>
<p>参数服务器加载YAML文件。</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118111514643.png" alt="image-20201118111514643"></p>
<h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118112820101.png" alt="image-20201118112820101"></p>
<h2 id="修改CMakeLists-txt，配置编译规则-1"><a href="#修改CMakeLists-txt，配置编译规则-1" class="headerlink" title="修改CMakeLists.txt，配置编译规则"></a>修改CMakeLists.txt，配置编译规则</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118113033092.png" alt="image-20201118113033092"></p>
<h1 id="坐标系管理系统（tf）"><a href="#坐标系管理系统（tf）" class="headerlink" title="坐标系管理系统（tf）"></a>坐标系管理系统（tf）</h1><h2 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h2><p>在后台维护<strong>tf tree</strong>，任意节点想要查询两节点之间的坐标转换关系直接查询tf tree</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118203639530.png" alt="image-20201118203639530"></p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118204114049.png" alt="image-20201118204114049"></p>
<h3 id="rosrun-tf-view-frames：生成pdf文档，显示tf维护的系统的tf-tree"><a href="#rosrun-tf-view-frames：生成pdf文档，显示tf维护的系统的tf-tree" class="headerlink" title="rosrun tf view_frames：生成pdf文档，显示tf维护的系统的tf tree"></a><strong>rosrun tf view_frames：</strong>生成pdf文档，显示tf维护的系统的tf tree</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118204652180.png" alt="image-20201118204652180"></p>
<h3 id="rosrun-tf-tf-echo-turtle1-turtle2：直接查询两坐标系的位置关系"><a href="#rosrun-tf-tf-echo-turtle1-turtle2：直接查询两坐标系的位置关系" class="headerlink" title="rosrun tf tf_echo turtle1 turtle2：直接查询两坐标系的位置关系"></a><strong>rosrun tf tf_echo turtle1 turtle2</strong>：直接查询两坐标系的位置关系</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118205551392.png" alt="image-20201118205551392"></p>
<h3 id="rviz可视化坐标显示"><a href="#rviz可视化坐标显示" class="headerlink" title="rviz可视化坐标显示"></a>rviz可视化坐标显示</h3><p><strong>rosrun rviz rviz -d ‘rospack find turtle_tf’ /rviz/turtle_rviz.rviz 可视化显示坐标关系</strong></p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118210657089.png" alt="image-20201118210657089"></p>
<h2 id="tf坐标系广播与监听的编程实现"><a href="#tf坐标系广播与监听的编程实现" class="headerlink" title="tf坐标系广播与监听的编程实现"></a>tf坐标系广播与监听的编程实现</h2><h3 id="创建功能包-1"><a href="#创建功能包-1" class="headerlink" title="创建功能包"></a>创建功能包</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118211255103.png" alt="image-20201118211255103"></p>
<h3 id="代码编写tf广播器"><a href="#代码编写tf广播器" class="headerlink" title="代码编写tf广播器"></a>代码编写tf广播器</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118211540900.png" alt="image-20201118211540900"></p>
<h3 id="代码编写tf监听器"><a href="#代码编写tf监听器" class="headerlink" title="代码编写tf监听器"></a>代码编写tf监听器</h3><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118212324860.png" alt="image-20201118212324860"></p>
<h3 id="配置编译规则"><a href="#配置编译规则" class="headerlink" title="配置编译规则"></a>配置编译规则</h3><p>add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)<br>target_link_libraries(turtle_tf_broadcaster ${catkin_LIBRARIES})</p>
<p>add_executable(turtle_tf_listener src/turtle_tf_listener.cpp)<br>target_link_libraries(turtle_tf_listener ${catkin_LIBRARIES})</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118212910212.png" alt="image-20201118212910212"></p>
<h3 id="编译并运行-3"><a href="#编译并运行-3" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><strong>__name:=turtle1_tf_broadcaster：</strong>节点映射，以:=后的内容改变代码中节点名称，防止节点名称重复</p>
<p>rosrun learning_tf turtle_tf_broadcaster __name:=turtle1_tf_broadcaster /turtle1</p>
<p>rosrun learning_tf turtle_tf_broadcaster __name:=turtle2_tf_broadcaster /turtle2</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118213800802.png" alt="image-20201118213800802"></p>
<h1 id="launch启动文件使用方法"><a href="#launch启动文件使用方法" class="headerlink" title="launch启动文件使用方法"></a>launch启动文件使用方法</h1><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118214204460.png" alt="image-20201118214204460"></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>可选属性：</strong></p>
<p>output：控制节点的日志信息是否要打印到当前终端<br>respawn：节点挂了是否需要重启<br>required：节点是否必须要启动<br>ns：命名空间，防止节点命名冲突<br>args：节点输入参数</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118214320579.png" alt="image-20201118214320579"></p>
<h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>argument不能传递给 include 元素里包含的子launch文件使用。 argument 就像是一个局部变量，它不能被包含的launch文件所 “继承” 。解决这个问题的方法：在 include 元素中插入 arg 元素作为 include 元素的子类。</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118215132790.png" alt="image-20201118215132790"></p>
<h2 id="重映射和嵌套"><a href="#重映射和嵌套" class="headerlink" title="重映射和嵌套"></a>重映射和嵌套</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118215240499.png" alt="image-20201118215240499"></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118215644032.png" alt="image-20201118215644032"></p>
<p><strong>ubuntu使用右下角设置文件格式为MXML即可使launch文件高亮显示</strong></p>
<p><strong>使用 roslaunch learning_launch(功能包) simple.launch(launch文件名)运行</strong></p>
<h2 id="xacro文件"><a href="#xacro文件" class="headerlink" title="xacro文件"></a>xacro文件</h2><h3 id="xacro文件转urdf文件以及使用urdf-to-graphiz显示物理模型框架"><a href="#xacro文件转urdf文件以及使用urdf-to-graphiz显示物理模型框架" class="headerlink" title="xacro文件转urdf文件以及使用urdf_to_graphiz显示物理模型框架"></a>xacro文件转urdf文件以及使用urdf_to_graphiz显示物理模型框架</h3><p>安装：sudo apt-get install liburdfdom-tools</p>
<p>rosrun xacro xacro turtlebot3_burger.urdf.xacro &gt; turtlebot3_burger.urdf –inorder</p>
<p><strong>check_urdf</strong> turtlebot3_burger.urdf</p>
<p><strong>urdf_to_graphiz</strong> turtlebot3_burger.urdf</p>
<p>生成一张pdf文档：</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201120193657338.png" alt="image-20201120193657338"></p>
<h1 id="常见可视化工具的使用"><a href="#常见可视化工具的使用" class="headerlink" title="常见可视化工具的使用"></a>常见可视化工具的使用</h1><h2 id="rqt"><a href="#rqt" class="headerlink" title="rqt"></a>rqt</h2><p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118220023521.png" alt="image-20201118220023521"></p>
<h2 id="Rviz（显示）"><a href="#Rviz（显示）" class="headerlink" title="Rviz（显示）"></a>Rviz（显示）</h2><p>使用<strong>rosrun rviz rviz</strong>打开</p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118220337358.png" alt="image-20201118220337358"></p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118220354453.png" alt="image-20201118220354453"></p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118220444315.png" alt="image-20201118220444315"></p>
<h2 id="Gazebo（仿真）"><a href="#Gazebo（仿真）" class="headerlink" title="Gazebo（仿真）"></a>Gazebo（仿真）</h2><p><strong>使用roslaunch gazebo_ros  ###运行</strong><br>elevator_world.launch      rubble_world.launch<br>empty_world.launch         shapes_world.launch<br>mud_world.launch           willowgarage_world.launch<br>range_world.launch     </p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118220703600.png" alt="image-20201118220703600"></p>
<p><img src="ROS%E5%85%A5%E9%97%A8.assets/image-20201118220734743.png" alt="image-20201118220734743"></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
