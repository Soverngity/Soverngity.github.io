<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ROS入门</title>
    <url>/2020/11/28/ROS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="ROS核心概念"><a href="#ROS核心概念" class="headerlink" title="ROS核心概念"></a>ROS核心概念</h1><p><strong>建议每次运行新程序之前都要运行roscore，因为ROS Master参数服务器存储的参数可能会冲突产生问题。</strong></p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118094857186.png" alt="image-20201118094857186"></p>
<h2 id="话题通信"><a href="#话题通信" class="headerlink" title="话题通信"></a>话题通信</h2><p>多对多的关系：针对同一个话题，可能有多个发布者和订阅者，如果有多个发布者可能会出现数据错乱</p>
<p>发布者和订阅者均具备缓冲区（因为可能发布者速度快，可能订阅者速度快）</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117142229766-1606552782784.png" alt="image-20201117142229766"></p>
<h2 id="服务通信"><a href="#服务通信" class="headerlink" title="服务通信"></a>服务通信</h2><p>一对多的关系</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117141802032-1606552796782.png" alt="image-20201117141802032"></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117142103385-1606552798782.png" alt="image-20201117142103385"></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>在ROS Master中存在有一个参数服务器，参数类型（int、float、string等），机制为RPC通信</p>
<p>适合静态配置参数，同样ROS中也存在动态配置参数的功能</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117142525315-1606552804333.png" alt="image-20201117142525315"></p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117142925265-1606552806261.png" alt="image-20201117142925265"></p>
<h1 id="ROS命令行基本操作"><a href="#ROS命令行基本操作" class="headerlink" title="ROS命令行基本操作"></a>ROS命令行基本操作</h1><p><strong>roscore</strong> ：启动ROS Master</p>
<p><strong>rosrun turtlesim turtlesim_node</strong> ：启动turtlesim软件包中的turtle节点（仿真）</p>
<p><strong>rosrun turtlesim turtle_teleop_key</strong>：启动turtlesim软件包中的turtle_teleop_key节点（键盘控制）</p>
<p><strong>rqt_graph</strong> ：用于显示系统计算图（ROS本质为一张计算图）</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117145023215-1606552808477.png" alt="image-20201117145023215"></p>
<p><strong>rosnode</strong>：显示系统所有节点信息</p>
<blockquote>
<p>rosnode is a command-line tool for printing information about ROS Nodes.</p>
<p>Commands:<br>    rosnode ping    test connectivity to node<br>    rosnode list    list active nodes<br>    rosnode info    print information about node<br>    rosnode machine    list nodes running on a particular machine or list machines<br>    rosnode kill    kill a running node<br>    rosnode cleanup    purge registration information of unreachable nodes</p>
<p>Type rosnode <command> -h for more detailed usage, e.g. ‘rosnode ping -h’</p>
</blockquote>
<p><strong>rostopic</strong>：与话题相关操作</p>
<blockquote>
<p>rostopic is a command-line tool for printing information about ROS Topics.</p>
<p>Commands:<br>    rostopic bw    display bandwidth used by topic<br>    rostopic delay    display delay of topic from timestamp in header<br>    rostopic echo    print messages to screen<br>    rostopic find    find topics by type<br>    rostopic hz    display publishing rate of topic<br>    rostopic info    print information about active topic<br>    rostopic list    list active topics<br>    rostopic pub    publish data to topic<br>    rostopic type    print topic or field type</p>
<p>Type rostopic <command> -h for more detailed usage, e.g. ‘rostopic echo -h’</p>
</blockquote>
<p>发布话题消息示例：</p>
<p>rostopic pub -r 10(-r 设置10Hz) /turtle1/cmd_vel(话题名) geometry_msgs/Twist(消息结构) “linear:<br>  x: 1.0<br>  y: 0.0<br>  z: 0.0<br>angular:<br>  x: 0.0<br>  y: 0.0<br>  z: 0.0” (具体消息)</p>
<p><strong>rosmsg show geometry_msgs/Twist：</strong>查看geometry_msgs/Twist的结构</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117151420689-1606552811550.png" alt="image-20201117151420689"></p>
<p><strong>rosservice list</strong>：</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117151824677-1606552812948.png" alt="image-20201117151824677"></p>
<p>发布服务请求，产生第二支海龟：</p>
<p>rosservice call /spawn “x: 0.0<br>y: 0.0<br>theta: 0.0<br>name: ‘turtle2’” </p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117152147293-1606552814660.png" alt="image-20201117152147293"></p>
<p>**rosbag record -a(all) -O(压缩包) cmd_record(压缩包名)**：话题记录（从运行此命令开始记录）</p>
<p><strong>rosbag play cmd_record</strong>：话题复现</p>
<h1 id="ROS创建工作空间和功能包"><a href="#ROS创建工作空间和功能包" class="headerlink" title="ROS创建工作空间和功能包"></a>ROS创建工作空间和功能包</h1><h2 id="创建工作环境"><a href="#创建工作环境" class="headerlink" title="创建工作环境"></a>创建工作环境</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117154628516-1606552817693.png" alt="image-20201117154628516"></p>
<p>catkin_make install 产生install文件夹</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117155717894-1606552819086.png" alt="image-20201117155717894"></p>
<h2 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117155002638-1606552821101.png" alt="image-20201117155002638"></p>
<h1 id="发布者、订阅者编程实现"><a href="#发布者、订阅者编程实现" class="headerlink" title="发布者、订阅者编程实现"></a>发布者、订阅者编程实现</h1><h2 id="使用Clion进行ROS开发"><a href="#使用Clion进行ROS开发" class="headerlink" title="使用Clion进行ROS开发"></a>使用Clion进行ROS开发</h2><p>参考：<a href="https://blog.csdn.net/ndyj0829/article/details/82192675">https://blog.csdn.net/ndyj0829/article/details/82192675</a></p>
<p>其中b步骤，b:进入/usr/share/applications中修改jetbrains-clion.desktop文件，在此路径下找不到，应该为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit ~&#x2F;.local&#x2F;share&#x2F;applications&#x2F;jetbrains-clion.desktop</span><br></pre></td></tr></table></figure>

<h2 id="发布者Publisher编程实现"><a href="#发布者Publisher编程实现" class="headerlink" title="发布者Publisher编程实现"></a>发布者Publisher编程实现</h2><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117191511654-1606552823262.png" alt="image-20201117191511654"></p>
<h3 id="修改CMakeLists-txt"><a href="#修改CMakeLists-txt" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117191608917-1606552824676.png" alt="image-20201117191608917"></p>
<h3 id="编译并运行发布者"><a href="#编译并运行发布者" class="headerlink" title="编译并运行发布者"></a>编译并运行发布者</h3><p>编译之后，在catkin_ws/devel/lib下生成名为velocity_publisher的可执行文件</p>
<p>下图source devel/setup.bash命令为设置终端可找到此功能包，因此可将此命令加入到~/.bashrc文件中，就不用再手动多次执行此命令，下两条rosrun命令分别启动功能包中的对应节点，配置完可直接启动。</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117191644257-1606552826749.png" alt="image-20201117191644257"></p>
<h3 id="python实现发布者"><a href="#python实现发布者" class="headerlink" title="python实现发布者"></a>python实现发布者</h3><p>无需编译，右键py文件权限将Allow executing file as program打勾（允许作为程序执行文件），命令行直接./velocity_publisher.py即可。</p>
<p><strong>如果通过rosrun执行呢？？？</strong><br>直接rosrun learning_topic velocity_publisher.py，rosrun learning_topic按两下table键即可看到。</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117192653050-1606552828965.png" alt="image-20201117192653050"></p>
<h2 id="订阅者Subscribe编程实现"><a href="#订阅者Subscribe编程实现" class="headerlink" title="订阅者Subscribe编程实现"></a>订阅者Subscribe编程实现</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117192904126-1606552830470.png" alt="image-20201117192904126"></p>
<h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117194856111-1606552832085.png" alt="image-20201117194856111"></p>
<h3 id="修改CMakeLists-txt-1"><a href="#修改CMakeLists-txt-1" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117194821806-1606552833428.png" alt="image-20201117194821806"></p>
<h3 id="编译并运行"><a href="#编译并运行" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117194930799-1606552835413.png" alt="image-20201117194930799"></p>
<h2 id="话题消息的定义跟使用"><a href="#话题消息的定义跟使用" class="headerlink" title="话题消息的定义跟使用"></a>话题消息的定义跟使用</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117200259691-1606552837828.png" alt="image-20201117200259691"></p>
<h3 id="自定义话题消息"><a href="#自定义话题消息" class="headerlink" title="自定义话题消息"></a>自定义话题消息</h3><p>1、msg文件语言无关，编译时动态扩展</p>
<p>2、  <build_depend>message_generation</build_depend>  //编译依赖，动态产生msg的依赖功能包<br>        <exec_depend>message_runtime</exec_depend>         //执行依赖，动态运行时依赖</p>
<p><strong>3、在CMakeLists.txt添加编译选项</strong></p>
<p>1）add_message_files(FILES Person.msg)                     //将Person.msg作为消息接口，针对其做编译<br>     generate_messages(DEPENDENCIES std_msgs)      //编译Person.msg依赖的ROS已有的库或包</p>
<p>2）找到catkin_package，取消注释CATKIN_DEPENDS一行并加入message_runtime</p>
<p>catkin_package(</p>
<p>#INCLUDE_DIRS include</p>
<p>#LIBRARIES learning_topic</p>
<p>CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime</p>
<p>#DEPENDS system_libmess</p>
<p>)</p>
<p>5、回到根目录，运行catkin_make进行编译</p>
<p>6、进入到catkin_ws/devel/include/learning_topic文件夹下即可看到编译生成的Person.h</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117200424924-1606552840501.png" alt="image-20201117200424924"></p>
<h3 id="创建发布者代码"><a href="#创建发布者代码" class="headerlink" title="创建发布者代码"></a>创建发布者代码</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117202343368-1606552841797.png" alt="image-20201117202343368"></p>
<h3 id="创建订阅者代码"><a href="#创建订阅者代码" class="headerlink" title="创建订阅者代码"></a>创建订阅者代码</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117202546391-1606552843461.png" alt="image-20201117202546391"></p>
<h3 id="修改CMakeLists-txt-2"><a href="#修改CMakeLists-txt-2" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p>add_executable(person_publisher src/person_publisher.cpp)<br>target_link_libraries(person_publisher ${catkin_LIBRARIES})<br>add_dependencies(person_publisher ${PROJECT_NAME}_generate_messages_cpp)    //用于跟自定义消息连接</p>
<p>add_executable(person_subscriber src/person_subscriber.cpp)<br>target_link_libraries(person_subscriber ${catkin_LIBRARIES})<br>add_dependencies(person_subscriber ${PROJECT_NAME}_generate_messages_cpp)  //用于跟自定义消息连接</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117203411595-1606552846621.png" alt="image-20201117203411595"></p>
<h3 id="编译并运行发布者和订阅者"><a href="#编译并运行发布者和订阅者" class="headerlink" title="编译并运行发布者和订阅者"></a>编译并运行发布者和订阅者</h3><p><strong>此时如果将roscore终端关闭也即关闭ROS Master，结果是仍然正常通信，因为此时两者已经建立连接，但是访问服务器参数时有问题</strong></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201117204035931-1606552848092.png" alt="image-20201117204035931"></p>
<h1 id="客户端、服务器编程实现"><a href="#客户端、服务器编程实现" class="headerlink" title="客户端、服务器编程实现"></a>客户端、服务器编程实现</h1><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118093026160.png" alt="image-20201118093026160"></p>
<h2 id="客户端编程代码"><a href="#客户端编程代码" class="headerlink" title="客户端编程代码"></a>客户端编程代码</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118092533798.png" alt="image-20201118092533798"></p>
<h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118093858683.png" alt="image-20201118093858683"></p>
<h3 id="修改CMakeLists-txt，配置编译规则"><a href="#修改CMakeLists-txt，配置编译规则" class="headerlink" title="修改CMakeLists.txt，配置编译规则"></a>修改CMakeLists.txt，配置编译规则</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118094102792.png" alt="image-20201118094102792"></p>
<h3 id="编译并运行-1"><a href="#编译并运行-1" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118094537609.png" alt="image-20201118094537609"></p>
<h2 id="服务端编程代码"><a href="#服务端编程代码" class="headerlink" title="服务端编程代码"></a>服务端编程代码</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118095211812.png" alt="image-20201118095211812"></p>
<h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118101352550.png" alt="image-20201118101352550"></p>
<h3 id="编译并运行-2"><a href="#编译并运行-2" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118101303710.png" alt="image-20201118101303710"></p>
<h2 id="服务数据的定义与使用"><a href="#服务数据的定义与使用" class="headerlink" title="服务数据的定义与使用"></a>服务数据的定义与使用</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118101904727.png" alt="image-20201118101904727"></p>
<h3 id="自定义服务数据"><a href="#自定义服务数据" class="headerlink" title="自定义服务数据"></a>自定义服务数据</h3><p>1、srv文件语言无关。**—三个横线以上为request数据，以下为respond的数据。**</p>
<p>2、  <build_depend>message_generation</build_depend>  //编译依赖，动态产生msg的依赖功能包<br>        <exec_depend>message_runtime</exec_depend>         //执行依赖，动态运行时依赖</p>
<p><strong>3、在CMakeLists.txt添加编译选项</strong></p>
<p>1）add_service_files(FILES Person.srv)                     //将Person.srv作为消息接口，针对其做编译<br>     generate_messages(DEPENDENCIES std_msgs)      //编译Person.srv依赖的ROS已有的库或包</p>
<p>2）找到catkin_package，取消注释CATKIN_DEPENDS一行并加入message_runtime</p>
<p>catkin_package(</p>
<p>#INCLUDE_DIRS include</p>
<p>#LIBRARIES learning_topic</p>
<p>CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime</p>
<p>#DEPENDS system_libmess</p>
<p>)</p>
<p>5、回到根目录，运行catkin_make进行编译</p>
<p>6、进入到catkin_ws/devel/include/learning_topic文件夹下即可看到编译生成三个头文件分别为：<br>Person.h（一般只包含此文件即可，总的）、PersonRequest.h（请求）、PersonRespond.h（回应）</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118103240016.png" alt="image-20201118103240016"></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118101958400.png" alt="image-20201118101958400"></p>
<h3 id="创建客户端代码"><a href="#创建客户端代码" class="headerlink" title="创建客户端代码"></a>创建客户端代码</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118103514340.png" alt="image-20201118103514340"></p>
<h3 id="创建服务端代码"><a href="#创建服务端代码" class="headerlink" title="创建服务端代码"></a>创建服务端代码</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118103428222.png" alt="image-20201118103428222"></p>
<h3 id="修改CMakeLists-txt-3"><a href="#修改CMakeLists-txt-3" class="headerlink" title="修改CMakeLists.txt"></a>修改CMakeLists.txt</h3><p>add_executable(person_server src/person_server.cpp)<br>target_link_libraries(person_server ${catkin_LIBRARIES})<br>add_dependencies(person_server ${PROJECT_NAME}_gencpp)    //用于跟自定义消息连接</p>
<p>add_executable(person_client src/person_client.cpp)<br>target_link_libraries(person_client ${catkin_LIBRARIES})<br>add_dependencies(person_client ${PROJECT_NAME}_gencpp)  //用于跟自定义消息连接</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118110550046.png" alt="image-20201118110550046"></p>
<h1 id="参数的使用与编程方法"><a href="#参数的使用与编程方法" class="headerlink" title="参数的使用与编程方法"></a>参数的使用与编程方法</h1><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118111301079.png" alt="image-20201118111301079"></p>
<h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118112103664.png" alt="image-20201118112103664"></p>
<p>设置颜色值不会马上更改，需要发送一个 rosservice call /clear “{}”  请求，会重新查询参数服务器，背景颜色更改</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118112130620.png" alt="image-20201118112130620"></p>
<p>参数服务器加载YAML文件。</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118111514643.png" alt="image-20201118111514643"></p>
<h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118112820101.png" alt="image-20201118112820101"></p>
<h2 id="修改CMakeLists-txt，配置编译规则-1"><a href="#修改CMakeLists-txt，配置编译规则-1" class="headerlink" title="修改CMakeLists.txt，配置编译规则"></a>修改CMakeLists.txt，配置编译规则</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118113033092.png" alt="image-20201118113033092"></p>
<h1 id="坐标系管理系统（tf）"><a href="#坐标系管理系统（tf）" class="headerlink" title="坐标系管理系统（tf）"></a>坐标系管理系统（tf）</h1><h2 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h2><p>在后台维护<strong>tf tree</strong>，任意节点想要查询两节点之间的坐标转换关系直接查询tf tree</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118203639530.png" alt="image-20201118203639530"></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118204114049.png" alt="image-20201118204114049"></p>
<h3 id="rosrun-tf-view-frames：生成pdf文档，显示tf维护的系统的tf-tree"><a href="#rosrun-tf-view-frames：生成pdf文档，显示tf维护的系统的tf-tree" class="headerlink" title="rosrun tf view_frames：生成pdf文档，显示tf维护的系统的tf tree"></a><strong>rosrun tf view_frames：</strong>生成pdf文档，显示tf维护的系统的tf tree</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118204652180.png" alt="image-20201118204652180"></p>
<h3 id="rosrun-tf-tf-echo-turtle1-turtle2：直接查询两坐标系的位置关系"><a href="#rosrun-tf-tf-echo-turtle1-turtle2：直接查询两坐标系的位置关系" class="headerlink" title="rosrun tf tf_echo turtle1 turtle2：直接查询两坐标系的位置关系"></a><strong>rosrun tf tf_echo turtle1 turtle2</strong>：直接查询两坐标系的位置关系</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118205551392.png" alt="image-20201118205551392"></p>
<h3 id="rviz可视化坐标显示"><a href="#rviz可视化坐标显示" class="headerlink" title="rviz可视化坐标显示"></a>rviz可视化坐标显示</h3><p><strong>rosrun rviz rviz -d ‘rospack find turtle_tf’ /rviz/turtle_rviz.rviz 可视化显示坐标关系</strong></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118210657089.png" alt="image-20201118210657089"></p>
<h2 id="tf坐标系广播与监听的编程实现"><a href="#tf坐标系广播与监听的编程实现" class="headerlink" title="tf坐标系广播与监听的编程实现"></a>tf坐标系广播与监听的编程实现</h2><h3 id="创建功能包-1"><a href="#创建功能包-1" class="headerlink" title="创建功能包"></a>创建功能包</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118211255103.png" alt="image-20201118211255103"></p>
<h3 id="代码编写tf广播器"><a href="#代码编写tf广播器" class="headerlink" title="代码编写tf广播器"></a>代码编写tf广播器</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118211540900.png" alt="image-20201118211540900"></p>
<h3 id="代码编写tf监听器"><a href="#代码编写tf监听器" class="headerlink" title="代码编写tf监听器"></a>代码编写tf监听器</h3><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118212324860.png" alt="image-20201118212324860"></p>
<h3 id="配置编译规则"><a href="#配置编译规则" class="headerlink" title="配置编译规则"></a>配置编译规则</h3><p>add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)<br>target_link_libraries(turtle_tf_broadcaster ${catkin_LIBRARIES})</p>
<p>add_executable(turtle_tf_listener src/turtle_tf_listener.cpp)<br>target_link_libraries(turtle_tf_listener ${catkin_LIBRARIES})</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118212910212.png" alt="image-20201118212910212"></p>
<h3 id="编译并运行-3"><a href="#编译并运行-3" class="headerlink" title="编译并运行"></a>编译并运行</h3><p><strong>__name:=turtle1_tf_broadcaster：</strong>节点映射，以:=后的内容改变代码中节点名称，防止节点名称重复</p>
<p>rosrun learning_tf turtle_tf_broadcaster __name:=turtle1_tf_broadcaster /turtle1</p>
<p>rosrun learning_tf turtle_tf_broadcaster __name:=turtle2_tf_broadcaster /turtle2</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118213800802.png" alt="image-20201118213800802"></p>
<h1 id="launch启动文件使用方法"><a href="#launch启动文件使用方法" class="headerlink" title="launch启动文件使用方法"></a>launch启动文件使用方法</h1><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118214204460.png" alt="image-20201118214204460"></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>可选属性：</strong></p>
<p>output：控制节点的日志信息是否要打印到当前终端<br>respawn：节点挂了是否需要重启<br>required：节点是否必须要启动<br>ns：命名空间，防止节点命名冲突<br>args：节点输入参数</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118214320579.png" alt="image-20201118214320579"></p>
<h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>argument不能传递给 include 元素里包含的子launch文件使用。 argument 就像是一个局部变量，它不能被包含的launch文件所 “继承” 。解决这个问题的方法：在 include 元素中插入 arg 元素作为 include 元素的子类。</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118215132790.png" alt="image-20201118215132790"></p>
<h2 id="重映射和嵌套"><a href="#重映射和嵌套" class="headerlink" title="重映射和嵌套"></a>重映射和嵌套</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118215240499.png" alt="image-20201118215240499"></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118215644032.png" alt="image-20201118215644032"></p>
<p><strong>ubuntu使用右下角设置文件格式为MXML即可使launch文件高亮显示</strong></p>
<p><strong>使用 roslaunch learning_launch(功能包) simple.launch(launch文件名)运行</strong></p>
<h2 id="xacro文件"><a href="#xacro文件" class="headerlink" title="xacro文件"></a>xacro文件</h2><h3 id="xacro文件转urdf文件以及使用urdf-to-graphiz显示物理模型框架"><a href="#xacro文件转urdf文件以及使用urdf-to-graphiz显示物理模型框架" class="headerlink" title="xacro文件转urdf文件以及使用urdf_to_graphiz显示物理模型框架"></a>xacro文件转urdf文件以及使用urdf_to_graphiz显示物理模型框架</h3><p>安装：sudo apt-get install liburdfdom-tools</p>
<p>rosrun xacro xacro turtlebot3_burger.urdf.xacro &gt; turtlebot3_burger.urdf –inorder</p>
<p><strong>check_urdf</strong> turtlebot3_burger.urdf</p>
<p><strong>urdf_to_graphiz</strong> turtlebot3_burger.urdf</p>
<p>生成一张pdf文档：</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201120193657338.png" alt="image-20201120193657338"></p>
<h1 id="常见可视化工具的使用"><a href="#常见可视化工具的使用" class="headerlink" title="常见可视化工具的使用"></a>常见可视化工具的使用</h1><h2 id="rqt"><a href="#rqt" class="headerlink" title="rqt"></a>rqt</h2><p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118220023521.png" alt="image-20201118220023521"></p>
<h2 id="Rviz（显示）"><a href="#Rviz（显示）" class="headerlink" title="Rviz（显示）"></a>Rviz（显示）</h2><p>使用<strong>rosrun rviz rviz</strong>打开</p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118220337358.png" alt="image-20201118220337358"></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118220354453.png" alt="image-20201118220354453"></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118220444315.png" alt="image-20201118220444315"></p>
<h2 id="Gazebo（仿真）"><a href="#Gazebo（仿真）" class="headerlink" title="Gazebo（仿真）"></a>Gazebo（仿真）</h2><p><strong>使用roslaunch gazebo_ros  ###运行</strong><br>elevator_world.launch      rubble_world.launch<br>empty_world.launch         shapes_world.launch<br>mud_world.launch           willowgarage_world.launch<br>range_world.launch     </p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118220703600.png" alt="image-20201118220703600"></p>
<p><img src="/2020/11/28/ROS%E5%85%A5%E9%97%A8/image-20201118220734743.png" alt="image-20201118220734743"></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>cmake学习之set</title>
    <url>/2020/12/01/cmake%E5%AD%A6%E4%B9%A0%E4%B9%8B-%20set/</url>
    <content><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p><code>set</code> 和 <code>unset</code> 为一对相反的指令，分别为设置变量以及取消设置变量。</p>
<ol>
<li><p>什么是变量？</p>
<ul>
<li>  变量就是用于保存值的存储单元。</li>
</ul>
</li>
<li><p><code>set</code>　有哪几种?</p>
<ul>
<li><p><code>set</code> 有三种，分别为: 设置一般变量(Set Normal Variable)， 设置缓存变量(Set Cache Entry)，设置环境变量(Set Environment Variable)</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 设置一般变量(<span class="keyword">Set</span> Normal Variable)</span><br><span class="line"><span class="keyword">set</span>(&lt;variable&gt; &lt;value&gt;... [PARENT_SCOPE])</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>. 设置缓存变量(<span class="keyword">Set</span> Cache Entry)</span><br><span class="line"><span class="keyword">set</span>(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</span><br><span class="line"></span><br><span class="line">// <span class="number">3</span>. 设置环境变量(<span class="keyword">Set</span> Environment Variable)</span><br><span class="line"><span class="keyword">set</span>(ENV&#123;&lt;variable&gt;&#125; [&lt;value&gt;])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>变量的作用域</p>
<ul>
<li>  <strong>Function Scope:</strong> 在函数内部定义,仅仅在当前函数以及所调用的子函数内有效;</li>
<li>  <strong>Directory Scope:</strong> 在当前目录的定义的变量,当调用子目录时候,子目录会复制一份父级目录内的变量到子目录中</li>
<li>  <strong>Persistent Cache:</strong> 持久化的缓存,一般由<code>CACHE</code> 存储起来.</li>
</ul>
</li>
<li><p>变量的搜索路径</p>
<ol>
<li> 在当前 <strong>Function Scope</strong> 调用内查找,找到后使用,未找到进行下一步;</li>
<li> 在当前目录下面查找,找到使用,未找到下一步;</li>
<li> 在 CACHE 中寻找,找到使用,未找到,则为空.</li>
</ol>
</li>
</ol>
<h1 id="设置一般变量-Normal-Variable"><a href="#设置一般变量-Normal-Variable" class="headerlink" title="设置一般变量(Normal Variable)"></a>设置一般变量(Normal Variable)</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(&lt;variable&gt; &lt;value&gt;... [PARENT_SCOPE])</span><br></pre></td></tr></table></figure>

<ul>
<li>  将一个或者多个值 <code>&lt;value&gt;...</code> 赋值给变量 <code>&lt;variable&gt;</code>， 多个值之间以分号（；）分隔。</li>
</ul>
<h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><ol>
<li>PARENT_SCOPE<ul>
<li>  配置该选项后，表示该变量在父级作用域上有效, 在当前作用域上是无效的;</li>
</ul>
</li>
</ol>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>目录结构如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rs:cmake-set$ tree</span><br><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── main.cpp</span><br><span class="line">└── subdir</span><br><span class="line">    └── CMakeLists.txt</span><br></pre></td></tr></table></figure>

<p>顶层的　CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(DEMO VERSION <span class="number">10.2</span>.<span class="number">1.3</span> LANGUAGES CXX C ASM )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(PNAME rsenjoyer)</span><br><span class="line"><span class="keyword">set</span>(PGRADE <span class="number">80</span> <span class="number">85</span> <span class="number">90</span> <span class="number">95</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;top name = $&#123;PNAME&#125;&quot;</span>)  </span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;top grade = $&#123;PGRADE&#125;&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(subdir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;top after name = $&#123;PNAME&#125;&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(DEMO main.cpp)</span><br></pre></td></tr></table></figure>

<p>子目录的 CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(PNAME jack)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;sub name = $&#123;PNAME&#125;&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(PNAME rose PARENT_SCOPE)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;sub name = $&#123;PNAME&#125;&quot;</span>) </span><br></pre></td></tr></table></figure>

<h1 id="设置缓存变量-Set-Cache-Entry"><a href="#设置缓存变量-Set-Cache-Entry" class="headerlink" title="设置缓存变量(Set Cache Entry)"></a>设置缓存变量(Set Cache Entry)</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong></p>
<ul>
<li>  设置变量并缓存到 CMakeCache.txt</li>
<li>  默认不会覆盖已缓存(已存在于 CMakeCache.txt )的变量；</li>
</ul>
<h2 id="参数解析-1"><a href="#参数解析-1" class="headerlink" title="参数解析"></a>参数解析</h2><ol>
<li><p>类型 type</p>
<p> 类型 type 必须为以下的一种</p>
<ul>
<li>BOOL<ul>
<li>  布尔值(ON/OFF)</li>
</ul>
</li>
<li>FILEPATH<ul>
<li>  文件路径</li>
</ul>
</li>
<li>PATH<ul>
<li>  目录路径</li>
</ul>
</li>
<li>STRING<ul>
<li>  字符串</li>
</ul>
</li>
<li>INTERNAL<ul>
<li>  单行文字</li>
</ul>
</li>
</ul>
</li>
<li><p> 描述字符串 <code>&lt;docstring&gt;</code>: 单行文字,用于 CMAKE-GUI 的时提示用户</p>
</li>
<li><p> FORCE 用于是否强制更新缓存里面的值，配置后，每次都会强制更新　<code>CMakeCache.txt</code> 里面的值</p>
</li>
</ol>
<h1 id="设置环境变量-Set-Environment-Variable"><a href="#设置环境变量-Set-Environment-Variable" class="headerlink" title="设置环境变量(Set Environment Variable)"></a>设置环境变量(Set Environment Variable)</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(ENV&#123;&lt;variable&gt;&#125; [&lt;value&gt;])</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong></p>
<ul>
<li>  设置环境变量 <code>&lt;variable&gt;</code>,值为 <code>&lt;value&gt;</code></li>
<li>  如果 <code>&lt;value&gt;</code> 不存在或者为空字符串 表示清除该环境变量</li>
</ul>
<h1 id="环境变量与一般变量区别"><a href="#环境变量与一般变量区别" class="headerlink" title="环境变量与一般变量区别"></a>环境变量与一般变量区别</h1><p>参考: <a href="https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#cmake-language-variables">https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#cmake-language-variables</a></p>
]]></content>
      <categories>
        <category>cmake</category>
      </categories>
      <tags>
        <tag>cmake</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>用ROS跑别人bag数据集</title>
    <url>/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<p>首先你得到了某大佬赏赐给你的bag数据集，让你这个菜鸟跑一下开源算法，开一开眼界，然而并不知道这个bag里面有什么类型的文件，所以得info一下，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br><span class="line">rosbag info yourname.bag</span><br></pre></td></tr></table></figure>

<p>yourname.bag是大佬给你的bag文件的名称，然后就会得到与下图类似的信息</p>
<p><img src="/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/v2-247d46a55a18102b416bd530350831c4_b.jpg"></p>
<p>topics:这一栏就显示了这个bag文件里面的数据类型，如图所示共有三个数据，一个imu数据，两个雷达数据。</p>
<p>得到topic的信息就可以修改launch文件了，launch文件位置~/catkin_ws/src/loam_velodyne/launch/loam_velodyne.launch</p>
<p><img src="/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/v2-7766157c869960fbc2358b2cfbba7c98_b.jpg"></p>
<p>如上图所示，将红线的地方修改成你的bag的topic名称，然后就可以启动launch文件运行算法了。</p>
<p>新开一个终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br><span class="line">roslaunch loam_velodyne loam_velodyne.launch</span><br></pre></td></tr></table></figure>

<p>此时RVIZ界面启动，如下图所示</p>
<p><img src="/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/v2-ed10057757341d2bdfcc9d06b8e30768_b.jpg"></p>
<p>然后新开终端，输入</p>
<p><img src="/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/v2-68d6ddf0a4c1d1764c9d8c0389041bde_b.jpg"></p>
<p>就开始了建图</p>
<p><img src="/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/v2-05b8de445b3ad0baac08d7e1462c1683_b.jpg"></p>
<p>我跑了两个算法，一个是原生的loam，一个是hector_loam，对比一下效果</p>
<p><img src="/2020/12/01/%E7%94%A8ROS%E8%B7%91%E5%88%AB%E4%BA%BAbag%E6%95%B0%E6%8D%AE%E9%9B%86/v2-c631bf929f0d8f7aff28d4f7d769699f_b.jpg"></p>
<p>左边是hector_loam，右边是loam，看起来效果差不多，仔细看hector_loam的清晰度更好一点。</p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树遍历</title>
    <url>/2020/11/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a><a href="#%E6%99%AE%E9%80%9A%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树遍历</a></h1><h2 id="前中后序遍历"><a href="#前中后序遍历" class="headerlink" title="前中后序遍历"></a>前中后序遍历</h2><p>神级遍历Morris遍历可实现前中后序遍历，时间复杂度O(n)，空间复杂度O(1)</p>
<h3 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">////////////////////// 递归 ////////////////////////////</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ans;</span><br><span class="line">        ans.push_back(root-&gt;val);</span><br><span class="line">        preorderTraversal(root-&gt;left);</span><br><span class="line">        preorderTraversal(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////// 迭代（用栈实现递归） ///////////////////</span></span><br><span class="line"><span class="comment">//前序遍历是中左右，每次先处理的是中间节点，那么先将跟节点放入栈中，然后将右孩子加入栈，再加入左孩子。</span></span><br><span class="line"><span class="comment">//先加入右孩子再加入左孩子是因为这样才能是中左右的顺序。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span>(root) st.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            ans.push_back(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right) st.push(node-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left) st.push(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h3><p>前序遍历相对简洁的代码：<strong>「因为要访问的元素和要处理的元素顺序是一致的，都是中间节点。」</strong></p>
<p>中序遍历，中序遍历是左中右，先访问的是二叉树顶部的节点不断访问左子节点，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进result数组中），这就造成了<strong>「处理顺序和访问顺序是不一致的。」</strong></p>
<p><img src="/2020/11/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/640.gif" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur || !st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                cur = cur-&gt;left; <span class="comment">//只要cur指针存在，不断将cur更新为左节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cur = st.top(); <span class="comment">//cur不存在，证明上一步已经到达叶子节点，将栈顶元素赋值给cur</span></span><br><span class="line">                st.pop();</span><br><span class="line">                ans.push_back(cur-&gt;val); <span class="comment">//加入结果数组</span></span><br><span class="line">                cur = cur-&gt;right; <span class="comment">//更新为右子节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h3><p><img src="/2020/11/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/640-1606309239175.png" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        st.push(root);</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            cur = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            <span class="keyword">if</span>(cur)</span><br><span class="line">                ans.push_back(cur-&gt;val);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            st.push(cur-&gt;left);</span><br><span class="line">            st.push(cur-&gt;right);</span><br><span class="line">        &#125; </span><br><span class="line">        reverse(ans.begin(), ans.end());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="前中后序遍历统一写法"><a href="#前中后序遍历统一写法" class="headerlink" title="前中后序遍历统一写法"></a>前中后序遍历统一写法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> &#123;&#125;; <span class="comment">//特殊判断要有！！！</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        st.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode *cur = st.top();</span><br><span class="line">            <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                ans.push_back(st.top()-&gt;val);</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;	<span class="comment">//***********前序遍历***********</span></span><br><span class="line">                st.pop(); <span class="comment">//弹栈</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) st.push(cur-&gt;right); <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) st.push(cur-&gt;left); <span class="comment">//左</span></span><br><span class="line">                st.push(cur); <span class="comment">//中</span></span><br><span class="line">                st.push(<span class="literal">nullptr</span>); <span class="comment">//加入空节点做标记</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//***********中序遍历***********</span></span><br><span class="line">                st.pop(); <span class="comment">//弹栈先加入右再加中再加左</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) st.push(cur-&gt;right); <span class="comment">//右</span></span><br><span class="line">                st.push(cur); <span class="comment">//中</span></span><br><span class="line">                st.push(<span class="literal">nullptr</span>); <span class="comment">//重点在于加入空节点做标记</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) st.push(cur-&gt;left); <span class="comment">//左</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//***********后序遍历***********</span></span><br><span class="line">                <span class="comment">//st.pop(); //无需弹栈，则入栈顺序为[中右左]弹栈相反为[左右中]</span></span><br><span class="line">                st.push(<span class="literal">nullptr</span>); <span class="comment">//加入空节点做标记</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) st.push(cur-&gt;right); <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) st.push(cur-&gt;left); <span class="comment">//左</span></span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树层次遍历"><a href="#二叉树层次遍历" class="headerlink" title="二叉树层次遍历"></a>二叉树层次遍历</h2><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h3><p><strong>题目描述：</strong>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>
<p><strong>示例：</strong><br>二叉树：<code>[3,9,20,null,null,15,7]</code>,</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7</code></pre>
<p>返回其层次遍历结果：</p>
<p>[<br>  [3],<br>  [9,20],<br>  [15,7]<br>]</p>
<p><strong>解答（BFS）：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//执行用时：4 ms, 在所有 C++ 提交中击败了89.32% 的用户</span></span><br><span class="line"><span class="comment">//内存消耗：11.6 MB, 在所有 C++ 提交中击败了77.70% 的用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">int</span> len = q.size(); <span class="comment">//保存一下队列长度</span></span><br><span class="line">            TreeNode *node;		<span class="comment">//保存一下弹出节点，若不保存以下均使用q.front(),时间变成8ms</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            &#123;  </span><br><span class="line">                node = q.front(); <span class="comment">//queue没有top，只有front和back，priority_queue有top</span></span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(node-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>解答（DFS）：</strong></p>
<p>​        由于题目要求每一层的节点都是从左到右遍历，因此递归时也要先递归左子树、再递归右子树。DFS 做本题的主要问题是： DFS 不是按照层次遍历的。<br>​        为了让递归的过程中同一层的节点放到同一个列表中，在递归时要记录每个节点的深度 level。递归到新节点要把该节点放入 level 对应列表的末尾。当遍历到一个新的深度 level，而最终结果 res 中还没有创建 level 对应的列表时，应该在 res 中新建一个列表用来保存该 level 的所有节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        dfs(res, root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, TreeNode* root, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (level &gt;= res.size())</span><br><span class="line">            res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        res[level].push_back(root-&gt;val);</span><br><span class="line">        dfs(res, root-&gt;left, level + <span class="number">1</span>);</span><br><span class="line">        dfs(res, root-&gt;right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107. 二叉树的层次遍历 II"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/">107. 二叉树的层次遍历 II</a></h3><p><strong>题目描述：</strong>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>
<p>例如：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<pre><code>  3
 / \
9  20
  /  \
 15   7</code></pre>
<p>返回其自底向上的层次遍历为：</p>
<p>[<br>  [15,7],<br>  [9,20],<br>  [3]<br>]</p>
<p><strong>解答：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//同上题代码，只是增加了一个返回数组的反转</span></span><br><span class="line"><span class="comment">//执行用时：4 ms, 在所有 C++ 提交中击败了91.18% 的用户</span></span><br><span class="line"><span class="comment">//内存消耗：11.7 MB, 在所有 C++ 提交中击败了56.20% 的用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrderBottom</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">int</span> len = q.size(); <span class="comment">//保存一下队列长度</span></span><br><span class="line">            TreeNode *node;		<span class="comment">//保存一下弹出节点，若不保存以下均使用q.front(),时间变成8ms</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            &#123;  </span><br><span class="line">                node = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(node-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以下代码也可换成 ans.reverse(ans.begin(), ans.end());</span></span><br><span class="line">        <span class="keyword">int</span> len = ans.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(ans[i], ans[len-i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>DFS解题方法（无需反转数组）：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrderBottom</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> depth = getDepth(root);</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">ans</span><span class="params">(depth)</span></span>;</span><br><span class="line">        dfs(ans, root, depth, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;ans, TreeNode *root, <span class="keyword">int</span> depth, <span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        ans[depth-level<span class="number">-1</span>].push_back(root-&gt;val); <span class="comment">// 倒着装depth-level-1</span></span><br><span class="line">        dfs(ans, root-&gt;left, depth, level+<span class="number">1</span>);</span><br><span class="line">        dfs(ans, root-&gt;right, depth, level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode *root)</span> <span class="comment">//求树的高度</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> max(getDepth(root-&gt;left), getDepth(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199. 二叉树的右视图"></a><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></h3><p><strong>题目描述：</strong>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>
<p><strong>示例:</strong></p>
<p><strong>输入:</strong> [1,2,3,null,5,null,4]<br><strong>输出:</strong> [1, 3, 4]<br><strong>解释:</strong><br>   1            &lt;—<br> /   <br>2     3         &lt;—<br> \     <br>  5     4       &lt;—</p>
<p><strong>解答：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root) que.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q_size = que.size();</span><br><span class="line">            TreeNode *cur = <span class="keyword">new</span> TreeNode(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q_size<span class="number">-1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) que.push(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) que.push(cur-&gt;right);</span><br><span class="line">            &#125;   </span><br><span class="line">            cur = que.front();</span><br><span class="line">            ans.push_back(cur-&gt;val);</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left) que.push(cur-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right) que.push(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改版，只需要在循环内判断是否等于q_size-1，代码简洁！！！</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root) que.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q_size = que.size();</span><br><span class="line">            TreeNode *cur = <span class="keyword">new</span> TreeNode(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q_size;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">if</span>(i == q_size<span class="number">-1</span>) ans.push_back(cur-&gt;val); <span class="comment">////////只需要在此判断</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) que.push(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) que.push(cur-&gt;right);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="429-N叉树的层序遍历"><a href="#429-N叉树的层序遍历" class="headerlink" title="429. N叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429. N叉树的层序遍历</a></h3><p><strong>题目描述：</strong>给定一个 N 叉树，返回其节点值的_层序遍历_。 (即从左到右，逐层遍历)。</p>
<p>例如，给定一个 <code>3叉树</code> :</p>
<p><img src="/2020/11/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/narytreeexample.png"></p>
<p>返回其层序遍历:</p>
<p>[<br>     [1],<br>     [3,2,4],<br>     [5,6]<br>]</p>
<p><strong>说明:</strong></p>
<ol>
<li> 树的深度不会超过 <code>1000</code>。</li>
<li> 树的节点总数不会超过 <code>5000</code>。</li>
</ol>
<p><strong>题解：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root) que.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q_size = que.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q_size;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *cur = que.front(); <span class="comment">//queue无top只有front</span></span><br><span class="line">                que.pop();</span><br><span class="line">                vec.push_back(cur-&gt;val);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur-&gt;children.size();j++)</span><br><span class="line">                    que.push(cur-&gt;children[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h2><p><strong>题目描述：</strong>翻转一棵二叉树。</p>
<p><strong>示例：</strong></p>
<p>输入：</p>
<pre><code> 4</code></pre>
<p>   /   <br>  2     7<br> / \   / <br>1   3 6   9</p>
<p>输出：</p>
<pre><code> 4</code></pre>
<p>   /   <br>  7     2<br> / \   / <br>9   6 3   1</p>
<p><strong>备注:</strong><br>这个问题是受到 <a href="https://twitter.com/mxcl">Max Howell</a> 的 <a href="https://twitter.com/mxcl/status/608682016205344768">原问题</a> 启发的 ：</p>
<blockquote>
<p>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</p>
<p>各种方法都可以用。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 迭代写法（广度优先-&gt;层次遍历）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root) que.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode *cur = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            TreeNode *tmp = cur-&gt;right;</span><br><span class="line">            cur-&gt;right = cur-&gt;left;</span><br><span class="line">            cur-&gt;left = tmp;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left) que.push(cur-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right) que.push(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归写法（深度优先-&gt;层次遍历）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left || root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode *tmp = root-&gt;left;</span><br><span class="line">            root-&gt;left = root-&gt;right;</span><br><span class="line">            root-&gt;right = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) dfs(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) dfs(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        swap(root-&gt;left, root-&gt;right);</span><br><span class="line">        invertTree(root-&gt;left);</span><br><span class="line">        invertTree(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        invertTree(root-&gt;left);         <span class="comment">// 左</span></span><br><span class="line">        swap(root-&gt;left, root-&gt;right);  <span class="comment">// 中</span></span><br><span class="line">        invertTree(root-&gt;left);         <span class="comment">// 注意 这里依然要遍历左孩子，因为中间节点已经翻转了</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        invertTree(root-&gt;left);</span><br><span class="line">        invertTree(root-&gt;right);</span><br><span class="line">        swap(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
</search>
